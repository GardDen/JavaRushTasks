package com.my_project.epam;

/**
 * Created by 1 on 11.12.2016.
 */

import com.sun.org.apache.xpath.internal.SourceTree;
import com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Условие задачи

 Построить иерархию классов для контрольных мероприятий, которые включают в себя:
 1.Два экзамена, за каждый из которых участник контрольного мероприятия (далее по тексту кандидат)
 получает целую оценку в диапазоне от 1 до 10. Контрольное мероприятие пройдено успешно, если кандидат набрал
 сумму, не меньшую, чем заранее заданное значение.
 2.Два экзамена, за каждый из которых кандидат получает целую оценку в диапазоне от 1 до 10. Контрольное мероприятие
 пройдено успешно, если кандидат за каждый экзамен получил оценку, не меньшую, чем заданную.
 3.Два экзамена, за каждый из которых кандидат получает целую или половинную оценку в диапазоне от 1 до 10 (1, 1.5, 2,
 2.5, … , 9, 9.5, 10), а также один зачет (оценки: сдан и не сдан). Контрольное мероприятие пройдено успешно, если
 кандидат за каждый экзамен получил оценку, не меньшую, чем заданную, и зачет сдан.
 4.Три экзамена. За первых два экзамена кандидат получает целую оценку в диапазоне от 1 до 10. За третий экзамен
 кандидат получает целую или половинную оценку в диапазоне от 0 до 20. Контрольное мероприятие пройдено успешно,
 если кандидат набрал сумму, не меньшую, чем заранее заданное значение.
 5.Два зачета (оценки: сдан и не сдан) и один экзамен, за который кандидат получает целую оценку в диапазоне от 0
 до 100. Контрольное мероприятие пройдено успешно, если кандидат сдал два зачета и получил оценку, не меньшую, чем
 заданную.

 Создать консольное приложение с единственным аргументом командной строки – имя входного файла. Данный файл должен
 содержать информацию о контрольных мероприятиях, которые проходили кандидаты. В одном файле могут быть данные о
 контрольных мероприятиях различного типа. Формат входного файла разработать самостоятельно.
 В приложении выполнить следующие задания:
 – прочитать входной файл;
 – создать коллекцию из успешно пройденных контрольных мероприятий;
 – вывести коллекцию (формат вывода произвольный);
 – упорядочить коллекцию по убыванию наибольшей среди всех оценок мероприятия;
 – вывести коллекцию;
 – вывести такое мероприятие из коллекции, у которого наибольшая оценка больше, чем 15, и она наименьшая среди
 наибольших оценок других мероприятий (если таких мероприятий больше одного, то вывести любое из них; например,
 наибольшие оценки мероприятий: 35, 24, 20, 19.5, 17, 16.5, 16.5, 14.5, 12, 10, 9.5, 8, 7; тогда надо вывести любое
 из мероприятий, в котором наибольшая оценка 16.5).
 Требования:
 – Использовать объектно-ориентированный подход для описания сущностей предметной области.
 – Приложение должно быть консольным. Не использовать графический интерфейс!
 – Входной файл текстовый.
 – Все исходные данные во входном файле корректные. Если в исходных данных есть ошибка, то результат работы
 программы может быть любым, в том
 числе программа может завершиться аварийно.
 Предпочтения по выбору языка программирования: 1) Java; 2) C++; 3) другой ООП язык.
 */
public class Epam_2016_09
{
    final static String RATING = "1 10 10\n" +
                                "2 10 10\n" +
                                "3 10.0 10.0 сдан\n" +
                                "4 10 10 20.0\n" +
                                "5 сдан сдан 100";
    final double[] controlValue = {10, 10, 10.0, 20.0, 80};//max value for event = {20, 20, 20, 40, 100}

    public static void main(String[] args) throws IOException// сюда вписать имя файла, хз как???
    {
        String fileName ="d:\\text.txt"; //= args
        List<String> listStringRating = new ArrayList<>();
        List<List<String>> listRating = new ArrayList<>();
        //BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        //     writeFile(fileName);
        readFile(fileName,listStringRating);
        System.out.println("Лист:");
        System.out.println(listStringRating);

        System.out.println("Считываем оценки из сторк.");
        for (int i = 0; i < listStringRating.size(); i++)
        {
            listRating.add(selectionRatingFromString(listStringRating.get(i)));
            System.out.println("Цикл работает, выводим оценки " + i + " строки:");
            System.out.println(selectionRatingFromString(listStringRating.get(i)));
            System.out.println("Выводим список оценок мероприятия как элемент коллекции");
            System.out.println(listRating.get(i));
        }

        System.out.println("Выводим на экран коллекцию коллекций.");
        System.out.println(listRating);

        for (List<String>  list:  listRating) System.out.println(list);
    }

    static void writeFile(String fileName){

        try
        {
            //Create Writer stream
            FileWriter writeFile = new FileWriter(fileName);
            System.out.println("Файл открыт для записи.");
            //write String
            writeFile.write(RATING);
            writeFile.close();
            System.out.println("Процесс записи успешно завершен.");
        }
        catch (IOException e)
        {
            System.out.println("Ошибка ввода/вывода: " + e.toString() + "\n" + "Неверное указание директории.");
        }
    }

    /**
     * построчное считывание файла
     * @param fileName
     * @param list
     */
    static void readFile(String fileName, List<String> list)
    {
        String s = null;
        int count = 0;
        try{
            //Create stream and buffer? read dara from is fileName
            FileReader fileReader = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fileReader);
            // Считывать данные, отображая на экран
            while((s = br.readLine())!= null) {
                System.out.println("row " + ++count + " read:" + s);
                list.add(s);
            }
            br.close();
            fileReader.close();
        }
        catch (IOException e){
            System.out.println("Ошибка чтене из файла: " + e.toString());
        }
    }

    static List<String> selectionRatingFromString(String s){
        List<String> list = new ArrayList<>();
        String rating = null;
        System.out.println("Начальная проверка метода: " + s);
        for (int i = 0; i <s.length(); i++){
            char test = s.charAt(i);
            if (" ".equals(test) || test == 0){
                i++;
                if (rating != null) {
                    list.add(rating);
                    rating = null;
                }
            }
            else rating += test;
        }
        System.out.println("Проверка работы метода, вывод листа:");
        System.out.println(list);
        return list;
    }

    class Candidate{

        class ControlEvent1{
            /*1.Два экзамена, за каждый из которых участник контрольного мероприятия (далее по тексту кандидат)
            получает целую оценку в диапазоне от 1 до 10. Контрольное мероприятие пройдено успешно, если кандидат набрал
            сумму, не меньшую, чем заранее заданное значение.*/

        }

        class ControlEvent2{
            /* 2.Два экзамена, за каждый из которых кандидат получает целую оценку в диапазоне от 1 до 10. Контрольное мероприятие
            пройдено успешно, если кандидат за каждый экзамен получил оценку, не меньшую, чем заданную.*/

        }

        class ControlEvent3{
             /* 3.Два экзамена, за каждый из которых кандидат получает целую или половинную оценку в диапазоне от 1 до 10 (1, 1.5, 2,
                    2.5, … , 9, 9.5, 10), а также один зачет (оценки: сдан и не сдан). Контрольное мероприятие пройдено успешно, если
            кандидат за каждый экзамен получил оценку, не меньшую, чем заданную, и зачет сдан.*/

        }

        class ControlEvent4{
            /* 4.Три экзамена. За первых два экзамена кандидат получает целую оценку в диапазоне от 1 до 10. За третий экзамен
            кандидат получает целую или половинную оценку в диапазоне от 0 до 20. Контрольное мероприятие пройдено успешно,
            если кандидат набрал сумму, не меньшую, чем заранее заданное значение.*/

        }

        class ControlEvent5{
            /* 5.Два зачета (оценки: сдан и не сдан) и один экзамен, за который кандидат получает целую оценку в диапазоне от 0
            до 100. Контрольное мероприятие пройдено успешно, если кандидат сдал два зачета и получил оценку, не меньшую, чем
            заданную.*/
        }
    }
}
